[{"C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\index.js":"1","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\App.js":"2","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\reportWebVitals.js":"3","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\Navbar.js":"4","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\pages\\ShowMovieDetails.js":"5","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\pages\\NotFoundPage.js":"6","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\pages\\MovieListPage.js":"7","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\SearchForm.js":"8","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\MovieCard.js":"9","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\MovieCardDetails.js":"10","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\CustomCarousel.js":"11","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\ShowReviews.js":"12","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\pages\\TestPage.js":"13","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\Sidebar.js":"14","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\Genres.js":"15","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\Spinner.js":"16"},{"size":589,"mtime":1610890038376,"results":"17","hashOfConfig":"18"},{"size":1261,"mtime":1610939815259,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":1427,"mtime":1610939774136,"results":"21","hashOfConfig":"18"},{"size":973,"mtime":1610936417791,"results":"22","hashOfConfig":"18"},{"size":681,"mtime":1610937957017,"results":"23","hashOfConfig":"18"},{"size":4854,"mtime":1617966266219,"results":"24","hashOfConfig":"18"},{"size":501,"mtime":1610721588805,"results":"25","hashOfConfig":"18"},{"size":3547,"mtime":1610940987125,"results":"26","hashOfConfig":"18"},{"size":4860,"mtime":1610939975950,"results":"27","hashOfConfig":"18"},{"size":101,"mtime":1610795696875,"results":"28","hashOfConfig":"18"},{"size":1829,"mtime":1610882356049,"results":"29","hashOfConfig":"18"},{"size":125,"mtime":1610883310838,"results":"30","hashOfConfig":"31"},{"size":1433,"mtime":1610896531789,"results":"32","hashOfConfig":"18"},{"size":1351,"mtime":1610902525821,"results":"33","hashOfConfig":"18"},{"size":364,"mtime":1610932716753,"results":"34","hashOfConfig":"18"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"1htteg4",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"37"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"37"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jraggk",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\index.js",[],["71","72"],"C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\App.js",[],"C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\reportWebVitals.js",[],"C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\Navbar.js",[],"C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\pages\\ShowMovieDetails.js",[],"C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\pages\\NotFoundPage.js",[],"C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\pages\\MovieListPage.js",["73","74","75"],"C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\SearchForm.js",[],"C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\MovieCard.js",["76"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./moviecard.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { faHeart, faShareAlt, faStar } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// https://api.themoviedb.org/3/genre/movie/list?api_key=430811050a45e411c3025a7085596f92&language=en-US\r\n\r\n// URL TO FETCH GENRE\r\n\r\nconst MovieCard = ({ movieGenres, card }) => {\r\n  // const [genres, setGenres] = useState([]);\r\n  const [movieGenre, setMovieGenre] = useState([]);\r\n  useEffect(() => {\r\n    setMovieGenre(\r\n      movieGenres.genres.reduce((acc, genre) => {\r\n        if (card.genre_ids.includes(genre.id)) acc.push(genre.name);\r\n        return acc;\r\n      }, [])\r\n    );\r\n  }, []);\r\n  const toggleClassName = (e) => {\r\n    e.target.parentNode.style.cssText.includes(\"red\")\r\n      ? (e.target.parentNode.style.cssText = \"font-size: 1.5rem;\")\r\n      : (e.target.parentNode.style.cssText = \"font-size: 1.5rem; color: red\");\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"movie_card\" id=\"tomb\">\r\n        <div className=\"info_section\">\r\n          <div className=\"movie_header\">\r\n            <img\r\n              className=\"locandina\"\r\n              src={`https://image.tmdb.org/t/p/w500/${card.poster_path}`}\r\n              alt=\"poster\"\r\n            />\r\n            <h1>\r\n              {card.title.length > 30\r\n                ? `${card.title.slice(0, 30)}...`\r\n                : card.title}\r\n            </h1>\r\n            <h4>{card.release_date.slice(0, 4)}</h4>\r\n            <span className=\"rating\">\r\n              <FontAwesomeIcon\r\n                style={{ fontSize: \"2rem\", color: \"yellow\" }}\r\n                icon={faStar}\r\n              />\r\n              <div className=\"ratings-stat\">\r\n                <div>\r\n                  <span className=\"average-rating\">{card.vote_average}</span>/10\r\n                </div>\r\n                <div>{card.vote_count} votes</div>\r\n              </div>\r\n            </span>\r\n            {\r\n              <>\r\n                {movieGenre.map((gen) => (\r\n                  <p key={gen} className=\"minutes\">\r\n                    {gen}\r\n                  </p>\r\n                ))}\r\n              </>\r\n            }\r\n          </div>\r\n          <div className=\"movie_desc\">\r\n            <p className=\"text\">\r\n              {card.overview.length > 250\r\n                ? `${card.overview.slice(0, 250)}...`\r\n                : card.overview}\r\n            </p>\r\n            <div className=\"button-see-more\">\r\n              <Link to={`/movie/${card.id}`}>\r\n                See More\r\n                <span className=\"shift\">â€º</span>\r\n              </Link>\r\n              <div className=\"mask\"></div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"movie_social\">\r\n            <ul>\r\n              <li onClick={toggleClassName}>\r\n                <FontAwesomeIcon\r\n                  style={{ fontSize: \"1.5rem\" }}\r\n                  icon={faHeart}\r\n                />\r\n              </li>\r\n              <li>\r\n                <FontAwesomeIcon\r\n                  style={{ color: \"white\", fontSize: \"1.5rem\" }}\r\n                  icon={faShareAlt}\r\n                />\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"blur_back tomb_back\"\r\n          style={{\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${card.backdrop_path}\")`,\r\n          }}\r\n        ></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieCard;\r\n","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\MovieCardDetails.js",["77"],"import React, { useState, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHeart, faShareAlt, faStar } from \"@fortawesome/free-solid-svg-icons\";\r\nimport ShowReviews from \"./ShowReviews\";\r\nimport Trend from \"../trend.png\";\r\nimport Genre from \"./Genres\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst API_KEY = process.env.REACT_APP_BACKEND_API_KEY;\r\n\r\nconst MovieCardDetails = ({ card }) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [reviews, setReviews] = useState([]);\r\n  const [recommendations, setRecommendations] = useState([]);\r\n\r\n  const toggleClassName = (e) => {\r\n    e.target.parentNode.style.cssText.includes(\"red\")\r\n      ? (e.target.parentNode.style.cssText = \"font-size: 1.5rem;\")\r\n      : (e.target.parentNode.style.cssText = \"font-size: 1.5rem; color: red\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchReviews = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const res = await fetch(\r\n          `https://api.themoviedb.org/3/movie/${card.id}/reviews?api_key=${API_KEY}`\r\n        );\r\n        const data = await res.json();\r\n        console.log(data);\r\n\r\n        setReviews(data.results);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    const fetchRecommendations = async () => {\r\n      try {\r\n        const res = await fetch(\r\n          `https://api.themoviedb.org/3/movie/${card.id}/recommendations?api_key=${API_KEY}`\r\n        );\r\n        const data = await res.json();\r\n        console.log(\"RECOMMENDATION\", data);\r\n\r\n        setRecommendations(data.results);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchReviews();\r\n    fetchRecommendations();\r\n  }, []);\r\n  console.log(card);\r\n  return (\r\n    <div>\r\n      <>\r\n        <div className=\"movie_card_large\" id=\"tomb\">\r\n          <div className=\"info_section\">\r\n            <div className=\"movie_header\">\r\n              <img\r\n                className=\"locandina\"\r\n                src={`https://image.tmdb.org/t/p/w500/${card.poster_path}`}\r\n                alt=\"poster\"\r\n              />\r\n              <h1>{card.title}</h1>\r\n              <h4>{card.release_date.slice(0, 4)}</h4>\r\n              <span className=\"rating\">\r\n                <FontAwesomeIcon\r\n                  style={{ fontSize: \"2rem\", color: \"yellow\" }}\r\n                  icon={faStar}\r\n                />\r\n                <div className=\"ratings-stat\">\r\n                  <div>\r\n                    <span className=\"average-rating\">{card.vote_average}</span>\r\n                    /10\r\n                  </div>\r\n                  <div>{card.vote_count} votes</div>\r\n                </div>\r\n                <div className=\"trend\">\r\n                  <img src={Trend} alt=\"trend\" />\r\n                  <span className=\"average-rating\">\r\n                    {Math.floor(card.popularity)}\r\n                  </span>\r\n                </div>\r\n              </span>\r\n            </div>\r\n            <Genre card={card} />\r\n            <div className=\"movie_desc\">\r\n              <p className=\"text\">{card.overview}</p>\r\n              <div className=\"similar-movies\">\r\n                <h3>You will also like</h3>\r\n                <div className=\"slideshow\">\r\n                  {recommendations.slice(0, 4).map((reco) => (\r\n                    <Link to={`/movie/${reco.id}`}>\r\n                      <div className=\"slideshow-card\">\r\n                        <img\r\n                          src={`https://image.tmdb.org/t/p/w500/${reco.poster_path}`}\r\n                          alt=\"poster\"\r\n                        />\r\n                        <p className=\"slideshow-title\">{reco.title}</p>\r\n                      </div>\r\n                    </Link>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"movie_social\">\r\n              <ul>\r\n                <li onClick={toggleClassName}>\r\n                  <FontAwesomeIcon\r\n                    style={{ fontSize: \"1.5rem\" }}\r\n                    icon={faHeart}\r\n                  />\r\n                </li>\r\n                <li>\r\n                  <FontAwesomeIcon\r\n                    style={{ color: \"white\", fontSize: \"1.5rem\" }}\r\n                    icon={faShareAlt}\r\n                  />\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"blur_back tomb_back\"\r\n            style={{\r\n              backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${card.backdrop_path}\")`,\r\n            }}\r\n          ></div>\r\n        </div>\r\n        {loading ? (\r\n          <h3>Loading</h3>\r\n        ) : (\r\n          <ul>\r\n            <ShowReviews reviews={reviews} />\r\n          </ul>\r\n        )}\r\n      </>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieCardDetails;\r\n","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\CustomCarousel.js",[],"C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\ShowReviews.js",[],"C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\pages\\TestPage.js",[],"C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\Sidebar.js",[],"C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\Genres.js",["78","79"],"import React, { useEffect, useState } from \"react\";\r\n\r\nconst Genres = ({ card }) => {\r\n  const [movieGenres, setMovieGenres] = useState([]);\r\n  const [movieGenre, setMovieGenre] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  //GET GENRE\r\n  useEffect(() => {\r\n    const getGenre = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const res = await fetch(\r\n          `https://api.themoviedb.org/3/genre/movie/list?api_key=430811050a45e411c3025a7085596f92&language=en-US`\r\n        );\r\n        const data = await res.json();\r\n        setMovieGenres(data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    getGenre();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"HERE\", movieGenres, card);\r\n    // setMovieGenre(\r\n    //   movieGenres.genres.reduce((acc, genre) => {\r\n    //     console.log(\"IN ACC\", acc);\r\n    //     if (card.genre_ids.includes(genre.id)) acc.push(genre.name);\r\n    //     return acc;\r\n    //   }, [])\r\n    // );\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <h1>Loading</h1>\r\n      ) : (\r\n        <h1>\r\n          {movieGenre.map((gen) => (\r\n            <p key={gen.id} className=\"minutes\">\r\n              {gen}\r\n            </p>\r\n          ))}\r\n        </h1>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Genres;\r\n","C:\\Users\\ACER\\Desktop\\coderschool\\Week6\\flicks\\src\\components\\Spinner.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":18},{"ruleId":"84","severity":1,"message":"88","line":18,"column":22,"nodeType":"86","messageId":"87","endLine":18,"endColumn":35},{"ruleId":"89","severity":1,"message":"90","line":110,"column":6,"nodeType":"91","endLine":110,"endColumn":63,"suggestions":"92"},{"ruleId":"89","severity":1,"message":"93","line":22,"column":6,"nodeType":"91","endLine":22,"endColumn":8,"suggestions":"94"},{"ruleId":"89","severity":1,"message":"95","line":53,"column":6,"nodeType":"91","endLine":53,"endColumn":8,"suggestions":"96"},{"ruleId":"84","severity":1,"message":"97","line":5,"column":22,"nodeType":"86","messageId":"87","endLine":5,"endColumn":35},{"ruleId":"89","severity":1,"message":"98","line":36,"column":6,"nodeType":"91","endLine":36,"endColumn":8,"suggestions":"99"},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'SearchForm' is defined but never used.","Identifier","unusedVar","'setFilterTerm' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'movies'. Either include it or remove the dependency array.","ArrayExpression",["102"],"React Hook useEffect has missing dependencies: 'card.genre_ids' and 'movieGenres.genres'. Either include them or remove the dependency array. If 'setMovieGenre' needs the current value of 'movieGenres.genres', you can also switch to useReducer instead of useState and read 'movieGenres.genres' in the reducer.",["103"],"React Hook useEffect has a missing dependency: 'card.id'. Either include it or remove the dependency array.",["104"],"'setMovieGenre' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'card' and 'movieGenres'. Either include them or remove the dependency array.",["105"],"no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},"Update the dependencies array to be: [sliderMarks, sliderYearMarks, filterTerm, optionChanged, movies]",{"range":"114","text":"115"},"Update the dependencies array to be: [card.genre_ids, movieGenres.genres]",{"range":"116","text":"117"},"Update the dependencies array to be: [card.id]",{"range":"118","text":"119"},"Update the dependencies array to be: [card, movieGenres]",{"range":"120","text":"121"},[3603,3660],"[sliderMarks, sliderYearMarks, filterTerm, optionChanged, movies]",[768,770],"[card.genre_ids, movieGenres.genres]",[1757,1759],"[card.id]",[1034,1036],"[card, movieGenres]"]